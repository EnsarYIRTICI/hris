@page
@model hris.Pages.Employees.Create.IndexModel
@{
}

<section class="overflow-auto h-full p-5">

    <nav class="flex items-center text-gray-500 space-x-2 my-6">
        @foreach (var breadcrumb in Model.Breadcrumbs)
        {
            if (!string.IsNullOrEmpty(breadcrumb.Url))
            {
                <a href="@breadcrumb.Url" class="hover:text-blue-500">@breadcrumb.Name</a>
                <span>/</span>
            }
            else
            {
                <span class="text-gray-800 font-semibold">@breadcrumb.Name</span>
            }
        }
    </nav>

    <div class="p-6 m-8 bg-white rounded-xl shadow-md space-y-4">
        <h1 class="text-2xl font-bold text-gray-700">Create Employee</h1>

        <!-- Error Message -->

        @if (!ModelState.IsValid || !string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg" role="alert">
                @if (!ModelState.IsValid)
                {
                    <p>Lütfen aşağıdaki hataları düzeltin:</p>
                    <ul class="mt-2 list-disc list-inside">
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                }
                @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                {
                    <p>@Model.ErrorMessage</p>
                }
            </div>
        }

        <!-- Success Message -->

        @if (!string.IsNullOrEmpty(Model.SuccessMessage))
        {
            <div class="p-4 mb-4 text-sm text-green-700 bg-green-100 rounded-lg" role="alert">
                <p>@Model.SuccessMessage</p>
            </div>
        }

        <form method="post" class="flex flex-wrap">

            <!-- Fullname -->


            <section class="w-full md:w-[15rem] space-y-4 md:mr-10 mb-8">
                <div>
                    <label for="firstName" class="block text-sm font-medium text-gray-700">First Name</label>
                    <input type="text"
                           id="firstName"
                           name="FirstName"
                           value="@Model.CreateEmployee.FirstName"
                           required
                           maxlength="100"
                           class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                </div>

                <div>
                    <label for="lastName" class="block text-sm font-medium text-gray-700">Last Name</label>
                    <input type="text"
                           id="lastName"
                           name="LastName"
                           value="@Model.CreateEmployee.LastName"
                           required
                           maxlength="100"
                           class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                </div>

                <div>
                    <label for="tckn" class="block text-sm font-medium text-gray-700">T.C. Identity Number</label>
                    <input type="text"
                           id="tckn"
                           name="Tckn"
                           value="@Model.CreateEmployee.Tckn"
                           required
                           maxlength="11"
                           pattern="\d{1,11}"
                           title="Only numbers are allowed, and the length should be 11 digits."
                           class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                </div>


                <div>
                    <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                    <input type="password"
                           id="password"
                           name="Password"
                           value="@Model.CreateEmployee.Password"
                           required
                           minlength="8"
                           class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                </div>

                <div>
                    <label for="dateOfBirth" class="block text-sm font-medium text-gray-700">Date of Birth</label>
                    <input type="date"
                           id="dateOfBirth"
                           name="DateOfBirth"
                           value="@Model.CreateEmployee.DateOfBirth"
                           required
                           class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                </div>




            </section>

            <section class="w-full md:w-[20rem] space-y-4 flex flex-col md:mr-10 mb-8">

                <!-- Email -->

                <div id="email-fields" class="space-y-4">
                    @if (Model.CreateEmployee.Emails != null && Model.CreateEmployee.Emails.Any())
                    {
                        foreach (var email in Model.CreateEmployee.Emails.Select((e, index) => new { e, index }))
                        {
                            <div class="email-item flex items-center space-x-4">
                                <div class="w-2/3">
                                    <label class="block text-sm font-medium text-gray-700">Email</label>
                                    <input type="email"
                                           name="Emails[@email.index].Email"
                                           value="@email.e.Email"
                                           required maxlength="200"
                                           class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                                </div>
                                <div class="w-1/3">
                                    <label class="block text-sm font-medium text-gray-700">Type</label>
                                    <select name="Emails[@email.index].EmailTypeId"
                                            required
                                            class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white">
                                        <option value="">Select</option>
                                        @foreach (var type in Model.EmailTypes)
                                        {
                                            <option value="@type.Id")>@type.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="email-item flex items-center space-x-4">
                            <div class="w-2/3">
                                <label class="block text-sm font-medium text-gray-700">Email</label>
                                <input type="email"
                                       name="Emails[0].Email"
                                       required maxlength="200"
                                       class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                            </div>
                            <div class="w-1/3">
                                <label class="block text-sm font-medium text-gray-700">Type</label>
                                <select name="Emails[0].EmailTypeId"
                                        required
                                        class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white">
                                    <option value="">Select</option>
                                    @foreach (var type in Model.EmailTypes)
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                    }

                </div>


                <button type="button" id="add-email"
                        class="items-center flex text-blue-500 hover:text-blue-300 text-sm cursor-pointer transition-all">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                         stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                         class="lucide lucide-circle-plus text-blue-500">
                        <circle cx="12" cy="12" r="10" />
                        <path d="M8 12h8" />
                        <path d="M12 8v8" />
                    </svg>
                    <span class="ml-1">Add Another Email</span>
                </button>

                <!-- PhoneNumber -->

                <div id="phone-fields" class="space-y-4">
                    @if (Model.CreateEmployee.PhoneNumbers != null && Model.CreateEmployee.PhoneNumbers.Any())
                    {
                        foreach (var phone in Model.CreateEmployee.PhoneNumbers.Select((p, index) => new { p, index }))
                        {
                            <div class="phone-item flex items-center space-x-4">
                                <div class="w-2/3">
                                    <label class="block text-sm font-medium text-gray-700">Phone Number</label>
                                    <input type="text"
                                           name="PhoneNumbers[@phone.index].PhoneNumber"
                                           value="@phone.p.PhoneNumber"
                                           required
                                           maxlength="10"
                                           pattern="\d{1,10}"
                                           title="Only numbers are allowed, and the length should be a maximum of 10 digits."
                                           class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                                </div>
                                <div class="w-1/3">
                                    <label class="block text-sm font-medium text-gray-700">Type</label>
                                    <select name="PhoneNumbers[@phone.index].PhoneTypeId"
                                            required
                                            class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white">
                                        <option value="">Select</option>
                                        @foreach (var type in Model.PhoneNumberTypes)
                                        {
                                            <option value="@type.Id">@type.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="phone-item flex items-center space-x-4">
                            <div class="w-2/3">
                                <label class="block text-sm font-medium text-gray-700">Phone Number</label>
                                <input type="text"
                                       name="PhoneNumbers[0].PhoneNumber"
                                       required
                                       maxlength="10"
                                       pattern="\d{1,10}"
                                       title="Only numbers are allowed, and the length should be a maximum of 10 digits."
                                       class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                            </div>
                            <div class="w-1/3">
                                <label class="block text-sm font-medium text-gray-700">Type</label>
                                <select name="PhoneNumbers[0].PhoneTypeId"
                                        required
                                        class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white">
                                    <option value="">Select</option>
                                    @foreach (var type in Model.PhoneNumberTypes)
                                    {
                                        <option value="@type.Id">@type.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                    }
                </div>


                <button type="button" id="add-phone"
                        class="items-center flex text-blue-500 hover:text-blue-300 text-sm cursor-pointer transition-all">
                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none"
                         stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                         class="lucide lucide-circle-plus text-blue-500">
                        <circle cx="12" cy="12" r="10" />
                        <path d="M8 12h8" />
                        <path d="M12 8v8" />
                    </svg>
                    <span class="ml-1">Add Another Phone</span>
                </button>
            </section>



            <section class="w-full md:w-[15rem] space-y-4 flex flex-col">



                <div>
                    <label for="department" class="block text-sm font-medium text-gray-700">Department</label>
                    <select id="department"
                            name="DepartmentId"
                            required
                            class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white">
                        <option value="">Select Department</option>
                        @foreach (var department in Model.Departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </select>
                </div>

                <div>
                    <label for="position" class="block text-sm font-medium text-gray-700">Position</label>
                    <select id="position"
                            name="PositionId"
                            required
                            class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white">
                        <option value="">Select Position</option>
                        @foreach (var position in Model.Positions)
                        {
                            <option value="@position.Id">@position.Name</option>
                        }
                    </select>
                </div>

                <div class="flex-1"></div>

                <div class="pt-4">
                    <button type="submit"
                            class="w-full bg-blue-500 text-white p-2 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-400">
                        Submit
                    </button>
                </div>

            </section>           
        </form>

    </div>



    <script>


        // TCKN

        document.getElementById('tckn').addEventListener('input', function (e) {
            const input = e.target.value;
            // Sadece sayılara izin ver, ve 11 haneyi aşmamasını sağla
            e.target.value = input.replace(/\D/g, '').slice(0, 11);
        })

        // Phone and Email Types

        @if (Model.EmailTypes != null && Model.PhoneNumberTypes != null)
        {
            <text>
                    const emailTypes = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.EmailTypes));
            const phoneNumberTypes = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.PhoneNumberTypes));
            </text>
        }

        // Select Department

        document.getElementById('department').addEventListener('input', function () {
            const searchTerm = this.value;

            fetch(`/employees/create/index?DepartmentId=${encodeURIComponent(searchTerm)}`, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    const positionElement = doc.getElementById('position');
                    document.getElementById('position').innerHTML = positionElement.innerHTML;
                })
                .catch(error => console.error('Error fetching search results:', error));
        });


        // Add Email

        document.getElementById('add-email').addEventListener('click', function () {
            const emailFields = document.getElementById('email-fields');
            const index = emailFields.querySelectorAll('.email-item').length; // Sadece email-item sınıfını say
            const emailField = `
                <div class="email-item flex items-center space-x-4">
                    <div class="w-2/3">
                        <label class="block text-sm font-medium text-gray-700">Email</label>
                        <input type="email"
                               name="Emails[${index}].Email"
                               required maxlength="200"
                               class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                    </div>
                    <div class="w-1/3">
                        <label class="block text-sm font-medium text-gray-700">Type</label>
                        <select name="Emails[${index}].EmailTypeId"
                                required
                                class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white">
                            <option value="">Select</option>
                            ${emailTypes.map(type => `<option value="${type.Id}">${type.Name}</option>`).join('')}
                        </select>
                    </div>
                </div>`;
            emailFields.insertAdjacentHTML('beforeend', emailField);
        });


        // Add Phone

        document.getElementById('add-phone').addEventListener('click', function () {
            const phoneFields = document.getElementById('phone-fields');
            const index = phoneFields.querySelectorAll('.phone-item').length; // Sadece phone-item sınıfını say
            const phoneField = `
                <div class="phone-item flex items-center space-x-4">
                    <div class="w-2/3">
                        <label class="block text-sm font-medium text-gray-700">Phone Number</label>
                        <input type="text"
                               name="PhoneNumbers[${index}].PhoneNumber"
                               required
                               maxlength="10"
                               pattern="\\d{1,10}"
                               title="Only numbers are allowed, and the length should be a maximum of 10 digits."
                               class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" />
                    </div>
                    <div class="w-1/3">
                        <label class="block text-sm font-medium text-gray-700">Type</label>
                        <select name="PhoneNumbers[${index}].PhoneTypeId"
                                required
                                class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 bg-white">
                            <option value="">Select</option>
                            ${phoneNumberTypes.map(type => `<option value="${type.Id}">${type.Name}</option>`).join('')}
                        </select>
                    </div>
                </div>`;
            phoneFields.insertAdjacentHTML('beforeend', phoneField);
        });



    </script>
</section>

